##继承
1. 扩展原型对象
``` javascript
  Person.prototype.a=10;
  Person.prototype.b=function(){};
```
2. 替换原型对象实现继承
```
	Function Person(){}
	Person.prototype={
		constructor:Person,
		fn:function(){}
	};
	var p=newPerson();
```
3. 混入继承
	已知对象o1,o2，需要将o1中的功能(属性、方法)拷贝到o2中
```
	var o1={name:"张三",age:20};
	var o2={};
	for( var k in o1){
		o2[k] = o1[k];
	}
```
4. 原型+混入继承
	对混入继承的一次应用，往原型对象中添加属性、方法
```
	    //混入
	    function mixin (target,source){
	        for (var k in source){
	            target [k] = source [k];
	        }
	        return target;
	    }
    function Person() { };
    Person.prototype.extend = function (source) {
        mixin(Person.prototype, source);
    }
    Person.prototype.extend({a: "啦啦啦", b: 39});
    var p = new Person();
    console.log(p);
```

5. 经典继承
	 IE9+)：Object:creat() 的实现原理就是经典继承
	可以先判断是否继承
```
	if (typeof Object.create!=="function"){
		Object.create=function(o){
			function F (){}    //一个任意的构造函数
			F.prototype=o;    //设置构造函数的原型对象
			return new F();    //返回的就是F的实例
		};
	}
```

6. 借用构造函数实现继承：
	涉及两个构造函数，父类构造函数(实现功能的函数)的全部功能都能够在子类构造函数(借用该功能的函数)中适用。
```
	function Foo6(name,age){
		this.name=name;
		this.age=age;
	}
	function NewFoo(name,age,number){
		Foo6.call(this,name,age);
		this.number=number;
	}
	//newFoo构造函数借用Foo6构造函数中的属性和方法
	var obj=newNewFoo("张三",18,10);
	console.log(obj);//NewFoo{name:"张三",age:18,number:10}
```
